// Generated by IcedCoffeeScript 108.0.11
(function() {
  var __hasProp = {}.hasOwnProperty;

  this['DocumentUploader'] = (function() {
    _Class.p = _Class.prototype;

    _Class.p.Manager;

    _Class.p.Wrapper;

    _Class.p.UploadWrapper;

    _Class.p.UploadInput;

    _Class.p.UploadBtn;

    _Class.p.Identifier;

    function _Class(opts) {
      var k, v;
      this.opts = opts != null ? opts : {};
      for (k in opts) {
        if (!__hasProp.call(opts, k)) continue;
        v = opts[k];
        this[k] = v;
      }
      console.log(this.Manager, 'Manager');
      this.UploadWrapper = $("<div />").addClass("docUploader");
      this.Identifier = $(this.Wrapper).attr('id');
      this.isSimple = $(this.Wrapper).data('simple');
      this.UploadInput = $('<input/>').attr('type', 'file');
      this.UploadBtn = $('<button />').addClass("buttonGreen small").text('Upload Document');
      if (!this.isSimple) {
        this.$complexWrapper = $.el('table', {
          'class': 'wthtop20',
          'width': '99%',
          'margin-left': '5px'
        }).append($.el('tr', {}).append($.el('td', {
          'class': 'txtalgnrgt'
        }).append($.el('label', {
          'class': 'input-label required'
        }).text("Document Name : ")), $.el('td', {}).append($.el('input', {
          'type': 'text',
          'name': this.Identifier + "_docName",
          'id': this.Identifier + "_docName"
        })), $.el('td', {
          'class': 'txtalgnrgt'
        }).append($.el('label', {
          'class': 'input-label required'
        }).text("Document Type : ")), $.el('td', {}).append($.el('select', {
          'name': this.Identifier + "_docType",
          'id': this.Identifier + "_docType"
        }).append($.el('option', {
          'selected': 'selected',
          'value': 0
        }).text("Select Type")))), $.el('tr', {}).append($.el('td', {
          'class': 'txtalgnrgt'
        }).append($.el('label', {
          'class': 'input-label required'
        }).text("Document : ")), $.el('td', {}).append(this.UploadInput), $.el('td', {
          'class': ''
        }).append(this.UploadBtn), $.el('td', {})));
        console.log(this.$complexWrapper);
      }
      this.init(this);
    }

    _Class.p.init = function(self) {
      var $uploadWrapper, $wrapperMain, k, v, _i, _len, _ref;
      this.self = self;
      $wrapperMain = $(this.Wrapper);
      $uploadWrapper = $(this.UploadWrapper);
      $(this.UploadInput).attr('id', this.Identifier + "_input");
      $(this.UploadBtn).click({
        input: this.UploadInput,
        uplWrapper: this.UploadWrapper
      }, function(e) {
        var uploadWorker;
        return uploadWorker = new FileUploader("Upload", null, e.data.input, e.data.uplWrapper);
      });
      $(this.UploadWrapper).attr('id', this.Identifier + "_Uploader");
      if (!this.isSimple) {
        $uploadWrapper.append(this.$complexWrapper);
      } else {
        $uploadWrapper.append(this.UploadInput);
        $uploadWrapper.append(this.UploadBtn);
      }
      $wrapperMain.append(this.UploadWrapper);
      this.Manager.loadAllDocument($wrapperMain.data('docid'));
      this.docTypes = this.Manager.DocumentTypeNames["doc_" + $(this.Wrapper).data('docid')];
      if (this.docTypes != null) {
        console.log(this.docTypes);
        _ref = this.docTypes;
        for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
          v = _ref[k];
          console.log(v, 'Value', k, "Key");
          this.$complexWrapper.find("#" + this.Identifier + "_docType").first().append($.el('option', {}).val(v.DocumentTypeId).text(v.DocumentTypeIdName));
        }
      }
    };

    return _Class;

  })();

}).call(this);
