// Generated by IcedCoffeeScript 108.0.11
(function() {
  var __hasProp = {}.hasOwnProperty;

  this['DocumentUploader'] = (function() {
    _Class.p = _Class.prototype;

    _Class.p.Manager = null;

    _Class.p.Wrapper = null;

    _Class.p.UploadWrapper = $("<div />").addClass("docUploader");

    _Class.p.UploadInput = $('<input/>').attr('type', 'file');

    _Class.p.UploadBtn = $('<button />').addClass("buttonGreen small").text('Upload Document');

    function _Class(opts) {
      var k, v;
      this.opts = opts != null ? opts : {};
      for (k in opts) {
        if (!__hasProp.call(opts, k)) continue;
        v = opts[k];
        this[k] = v;
      }
      console.log(this.Manager, 'Manager');
      this.init(this);
    }

    _Class.p.init = function(self) {
      var $uploadWrapper, $wrapperMain;
      this.self = self;
      this.Identifier = $(this.Wrapper).attr('id');
      $wrapperMain = $(this.Wrapper);
      $uploadWrapper = $(this.UploadWrapper);
      $(this.UploadInput).attr('id', this.Identifier + "_input");
      $(this.UploadBtn).click({
        input: this.UploadInput,
        uplWrapper: this.UploadWrapper
      }, function(e) {
        var uploadWorker;
        return uploadWorker = new FileUploader("", null, e.data.input, e.data.uplWrapper);
      });
      $(this.UploadWrapper).attr('id', this.Identifier + "_Uploader");
      $wrapperMain.append(this.UploadWrapper);
      $uploadWrapper.append(this.UploadInput);
      return $uploadWrapper.append(this.UploadBtn);
    };

    _Class.p.check = function() {};

    return _Class;

  })();

}).call(this);
