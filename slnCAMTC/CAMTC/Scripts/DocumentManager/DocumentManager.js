// Generated by IcedCoffeeScript 108.0.11
(function() {
  var __hasProp = {}.hasOwnProperty;

  this['DocumentManager'] = (function() {
    _Class.p = _Class.prototype;

    _Class.p.ApiBaseUrl = "";

    _Class.p.ApplicationId = "";

    _Class.p.ProviderId = "";

    _Class.p.ApiSaveEndpoint = "";

    _Class.p.ApiDeleteEndpoint = "";

    _Class.p.ApiGetDocumentsEndpoint = "";

    _Class.p.Key = "";

    _Class.p.UserId = "";

    _Class.p.DocumentUploader = {};

    _Class.p.DocumentContainerBuilder;

    _Class.p.ApplicationDocuments = [];

    _Class.p.DocumentWrapperClass = "documentContainer";

    _Class.p.CurrentInstance = {};

    function _Class(opts) {
      var k, v;
      this.opts = opts != null ? opts : {};
      for (k in opts) {
        if (!__hasProp.call(opts, k)) continue;
        v = opts[k];
        this[k] = v;
      }
      this.CurrentInstance = this;
      this.init();
    }

    _Class.p.init = function() {
      var _self;
      _self = this.CurrentInstance;
      $("." + this.DocumentWrapperClass).each(function() {
        console.log(_self);
        _self.addUploader(this);
      });
    };

    _Class.p.loadAllDocument = function() {
      var obj;
      obj = this.CurrentInstance;
      return $.ajax({
        url: obj.ApiBaseUrl + obj.ApiGetDocumentsEndpoint + "/" + obj.Key
      });
    };

    _Class.p.addUploader = function(wrapper) {
      console.log('Wrapper', this.checkWrapper(wrapper.id));
      if (this.checkWrapper(wrapper.id).length === 0) {
        return this.ApplicationDocuments[wrapper.id] = {
          Wrapper: wrapper,
          Uploader: new DocumentUploader({
            Manager: this.self,
            Wrapper: wrapper
          })
        };
      }
    };

    _Class.p.getAllWrapper = function() {
      var k, v, _ref;
      this.ApplicationDocuments;
      _ref = this.ApplicationDocuments;
      for (k in _ref) {
        v = _ref[k];
        console.log(this.CurrentInstance.ApplicationDocuments[k]);
      }
    };

    _Class.p.checkWrapper = function(id) {
      var k, v, _ref, _results;
      _ref = this.ApplicationDocuments;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (k === id) {
          console.log(this.CurrentInstance.ApplicationDocuments[k]);
          _results.push(this.CurrentInstance.ApplicationDocuments[k]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    _Class.p.refresh = function() {
      $("." + this.DocumentWrapperClass).each(function(e) {
        return _self.addUploader(this);
      });
    };

    return _Class;

  })();

  $(document).ready(function() {
    return window.DefaultDocumentManager = new DocumentManager({
      ApiBaseUrl: "/test/",
      ApplicationId: '1',
      ProviderId: "0",
      ApiSaveEndpoint: "Save",
      ApiDeleteEndpoint: "Delete",
      ApiGetDocumentsEndpoint: "Get"
    });
  });

}).call(this);
